import React, { useState, useEffect } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  ActivityIndicator, 
  TouchableOpacity, 
  Animated,
  SafeAreaView,
  Dimensions 
} from 'react-native';

const API_URL = "https://api.open-meteo.com/v1/forecast?latitude=13.69&longitude=-89.19&hourly=temperature_2m,relative_humidity_2m&timezone=America%2FEl_Salvador";

const AppContainer = () => {
  const [sensorData, setSensorData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showARPanel, setShowARPanel] = useState(false);
  const [mainPanelOpacity] = useState(new Animated.Value(1));

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(API_URL);
      if (response.ok) {
        const data = await response.json();
        const sensorData = {
          id: 1,
          temperature: data.hourly.temperature_2m[0],
          humidity: data.hourly.relative_humidity_2m[0],
          location: "San Salvador",
          status: "OK",
          lastUpdated: new Date().toLocaleTimeString(),
          battery: "100",
          co2: "N/A"
        };
        setSensorData(sensorData);
      } else {
        throw new Error("Error en la conexi√≥n con la API");
      }
    } catch (err) {
      console.error("Error fetching data:", err);
      setError("Error de conexi√≥n - Usando datos simulados");
      setSensorData({
        id: 1,
        temperature: "25.5",
        humidity: "65",
        location: "San Salvador (simulado)",
        status: "OK",
        lastUpdated: new Date().toLocaleTimeString(),
        battery: "100",
        co2: "N/A"
      });
    } finally {
      setLoading(false);
    }
  };

  const toggleARPanel = () => {
    if (showARPanel) {
      // Al cerrar el panel AR
      Animated.timing(mainPanelOpacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true
      }).start();
    } else {
      // Al abrir el panel AR
      Animated.timing(mainPanelOpacity, {
        toValue: 0.3,
        duration: 300,
        useNativeDriver: true
      }).start();
    }
    setShowARPanel(!showARPanel);
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 60000);
    return () => clearInterval(interval);
  }, []);

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        {loading && !sensorData ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#4A90E2" />
            <Text style={styles.loadingText}>Cargando datos...</Text>
          </View>
        ) : (
          <>
            <Animated.View style={[styles.mainContent, { opacity: mainPanelOpacity }]}>
              <View style={styles.header}>
                <Text style={styles.headerTitle}>Monitor Ambiental</Text>
                <Text style={styles.headerSubtitle}>Datos en tiempo real</Text>
              </View>
              
              <View style={styles.dataCard}>
                <View style={styles.dataRow}>
                  <Text style={styles.dataLabel}>üå°Ô∏è Temperatura</Text>
                  <Text style={styles.dataValue}>{sensorData?.temperature}¬∞C</Text>
                </View>
                <View style={styles.dataRow}>
                  <Text style={styles.dataLabel}>üíß Humedad</Text>
                  <Text style={styles.dataValue}>{sensorData?.humidity}%</Text>
                </View>
                <View style={styles.dataRow}>
                  <Text style={styles.dataLabel}>üìç Ubicaci√≥n</Text>
                  <Text style={styles.dataValue}>{sensorData?.location}</Text>
                </View>
                
                <View style={styles.statusContainer}>
                  <View style={[
                    styles.statusIndicator, 
                    { backgroundColor: sensorData?.status === "OK" ? "#4CAF50" : "#F44336" }
                  ]} />
                  <Text style={styles.statusText}>Estado: {sensorData?.status}</Text>
                </View>
                
                <Text style={styles.updateText}>Actualizado: {sensorData?.lastUpdated}</Text>
                
                {error && <Text style={styles.errorText}>{error}</Text>}
              </View>
              
              <View style={styles.buttonContainer}>
                <TouchableOpacity 
                  style={styles.button} 
                  onPress={fetchData}
                  disabled={loading}
                >
                  <Text style={styles.buttonText}>
                    {loading ? 'Actualizando...' : 'Actualizar Datos'}
                  </Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={[styles.button, styles.arButton]}
                  onPress={toggleARPanel}
                >
                  <Text style={styles.buttonText}>
                    {showARPanel ? 'Ocultar AR' : 'Mostrar AR'}
                  </Text>
                </TouchableOpacity>
              </View>
            </Animated.View>
            
            {showARPanel && (
              <ARPanel 
                data={sensorData} 
                onClose={toggleARPanel} 
                loading={loading} 
              />
            )}
          </>
        )}
      </View>
    </SafeAreaView>
  );
};

const ARPanel = ({ data, onClose, loading }) => {
  const [scale] = useState(new Animated.Value(0.8));
  const [opacity] = useState(new Animated.Value(0));
  const [pulseAnim] = useState(new Animated.Value(1));

  useEffect(() => {
    Animated.parallel([
      Animated.spring(scale, {
        toValue: 1,
        friction: 6,
        useNativeDriver: true
      }),
      Animated.timing(opacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true
      }),
      Animated.loop(
        Animated.sequence([
          Animated.timing(pulseAnim, {
            toValue: 1.1,
            duration: 1000,
            useNativeDriver: true
          }),
          Animated.timing(pulseAnim, {
            toValue: 1,
            duration: 1000,
            useNativeDriver: true
          })
        ])
      )
    ]).start();
  }, []);

  if (!data) return null;

  const statusColor = data.status === "OK" ? "#4CAF50" : "#F44336";

  return (
    <Animated.View style={[styles.arPanelContainer, { opacity }]}>
      <Animated.View style={[styles.arPanel, { transform: [{ scale }] }]}>
        <TouchableOpacity 
          style={styles.closeButton} 
          onPress={onClose}
          activeOpacity={0.7}
        >
          <Text style={styles.closeText}>‚úï</Text>
        </TouchableOpacity>

        <View style={styles.sensorHeader}>
          <Animated.View style={[styles.sensorIcon, { transform: [{ scale: pulseAnim }] }]}>
            <Text style={styles.sensorIconText}>üì°</Text>
          </Animated.View>
          <View>
            <Text style={styles.panelTitle}>Sensor #{data.id}</Text>
            <Text style={styles.panelSubtitle}>Realidad Aumentada</Text>
          </View>
        </View>

        <View style={styles.dataGrid}>
          <View style={styles.dataCell}>
            <Text style={styles.dataLabel}>üå°Ô∏è Temperatura</Text>
            <Text style={styles.dataValue}>{data.temperature}¬∞C</Text>
          </View>
          <View style={styles.dataCell}>
            <Text style={styles.dataLabel}>üíß Humedad</Text>
            <Text style={styles.dataValue}>{data.humidity}%</Text>
          </View>
          <View style={styles.dataCell}>
            <Text style={styles.dataLabel}>üè† Ubicaci√≥n</Text>
            <Text style={styles.dataValue}>{data.location}</Text>
          </View>
          <View style={styles.dataCell}>
            <Text style={styles.dataLabel}>üîã Bater√≠a</Text>
            <Text style={styles.dataValue}>{data.battery}%</Text>
          </View>
        </View>

        <View style={[styles.statusBadge, { backgroundColor: statusColor }]}>
          <Text style={styles.statusText}>{data.status}</Text>
        </View>

        <Text style={styles.updateText}>Actualizado: {data.lastUpdated}</Text>

        {loading && (
          <View style={styles.loadingOverlay}>
            <ActivityIndicator size="small" color="#fff" />
          </View>
        )}
      </Animated.View>
    </Animated.View>
  );
};

// Estilos mejorados
const { width, height } = Dimensions.get('window');
const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F5F7FA'
  },
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#F5F7FA'
  },
  mainContent: {
    flex: 1
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingText: {
    marginTop: 15,
    fontSize: 16,
    color: '#666'
  },
  header: {
    marginBottom: 25,
    alignItems: 'center'
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#2C3E50'
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#7F8C8D',
    marginTop: 5
  },
  dataCard: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3,
    marginBottom: 20
  },
  dataRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#ECF0F1'
  },
  dataLabel: {
    fontSize: 16,
    color: '#34495E',
    fontWeight: '500'
  },
  dataValue: {
    fontSize: 16,
    color: '#2C3E50',
    fontWeight: '600'
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 15,
    marginBottom: 10
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: 8
  },
  statusText: {
    fontSize: 14,
    color: '#7F8C8D'
  },
  updateText: {
    fontSize: 12,
    color: '#BDC3C7',
    textAlign: 'right',
    marginTop: 5
  },
  errorText: {
    color: '#E74C3C',
    marginTop: 10,
    textAlign: 'center',
    fontSize: 14
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10
  },
  button: {
    backgroundColor: '#4A90E2',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
    flex: 1,
    marginHorizontal: 5
  },
  arButton: {
    backgroundColor: '#9B59B6'
  },
  buttonText: {
    color: '#FFF',
    fontWeight: '600',
    fontSize: 16
  },
  // Estilos para el panel AR
  arPanelContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 100
  },
  arPanel: {
    width: width * 0.85,
    backgroundColor: '#FFF',
    borderRadius: 16,
    padding: 25,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 20
  },
  closeButton: {
    position: 'absolute',
    top: 15,
    right: 15,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#ECF0F1',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10
  },
  closeText: {
    fontSize: 18,
    color: '#7F8C8D',
    fontWeight: 'bold'
  },
  sensorHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 25
  },
  sensorIcon: {
    marginRight: 15
  },
  sensorIconText: {
    fontSize: 32
  },
  panelTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#2C3E50'
  },
  panelSubtitle: {
    fontSize: 14,
    color: '#7F8C8D',
    marginTop: 3
  },
  dataGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 15
  },
  dataCell: {
    width: '48%',
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12
  },
  dataLabel: {
    fontSize: 14,
    color: '#7F8C8D',
    marginBottom: 5
  },
  dataValue: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2C3E50'
  },
  statusBadge: {
    alignSelf: 'center',
    paddingVertical: 8,
    paddingHorizontal: 20,
    borderRadius: 20,
    marginTop: 10
  },
  statusText: {
    fontSize: 16,
    color: '#FFF',
    fontWeight: '600',
    textAlign: 'center'
  },
  loadingOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(255,255,255,0.8)',
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center'
  }
});

export default AppContainer;